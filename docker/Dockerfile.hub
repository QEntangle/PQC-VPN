# Use Ubuntu 22.04 as base image for better PQC support
FROM ubuntu:22.04

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=UTC

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    libssl-dev \
    libgmp-dev \
    libtspi-dev \
    libldap2-dev \
    libcurl4-openssl-dev \
    libxml2-dev \
    libsystemd-dev \
    libpcsclite-dev \
    pkg-config \
    gettext \
    flex \
    bison \
    autoconf \
    automake \
    libtool \
    git \
    wget \
    curl \
    python3 \
    python3-pip \
    cmake \
    ninja-build \
    iptables \
    iputils-ping \
    net-tools \
    iproute2 \
    supervisor \
    && rm -rf /var/lib/apt/lists/*

# Create directories
RUN mkdir -p /opt/pqc-vpn/{certs,scripts,logs} \
    && mkdir -p /etc/ipsec.d/{cacerts,certs,private} \
    && mkdir -p /var/log/pqc-vpn

# Install liboqs for Post-Quantum Cryptography
WORKDIR /tmp
RUN git clone --depth 1 --branch main https://github.com/open-quantum-safe/liboqs.git \
    && cd liboqs \
    && mkdir build && cd build \
    && cmake -G Ninja -DCMAKE_INSTALL_PREFIX=/usr/local \
          -DOQS_BUILD_ONLY_LIB=ON \
          -DOQS_MINIMAL_BUILD="KEM_kyber_512;KEM_kyber_768;KEM_kyber_1024;SIG_dilithium_2;SIG_dilithium_3;SIG_dilithium_5" \
          .. \
    && ninja \
    && ninja install \
    && ldconfig \
    && cd / \
    && rm -rf /tmp/liboqs

# Install strongSwan with PQC support
WORKDIR /tmp
RUN git clone https://github.com/strongswan/strongswan.git \
    && cd strongswan \
    && git checkout 5.9.14 \
    && ./autogen.sh \
    && ./configure --prefix=/usr --sysconfdir=/etc --localstatedir=/var \
        --libexecdir=/usr/lib --enable-openssl --enable-python-eggs \
        --enable-cmd --enable-conf --enable-connmark --enable-dhcp \
        --enable-eap-aka --enable-eap-gtc --enable-eap-identity \
        --enable-eap-md5 --enable-eap-mschapv2 --enable-eap-radius \
        --enable-eap-tls --enable-farp --enable-files --enable-gcrypt \
        --enable-gmp --enable-ldap --enable-mysql --enable-sqlite \
        --enable-stroke --enable-updown --enable-unity --enable-xauth-eap \
        --enable-xauth-pam --enable-chapoly --enable-curl --enable-systemd \
        --disable-des --enable-oqs --with-ipseclibdir=/usr/lib/ipsec \
    && make -j$(nproc) \
    && make install \
    && cd / \
    && rm -rf /tmp/strongswan

# Copy scripts and configurations
COPY scripts/ /opt/pqc-vpn/scripts/
COPY configs/hub/ /etc/
RUN chmod +x /opt/pqc-vpn/scripts/*.sh

# Create supervisor configuration
RUN echo '[supervisord]' > /etc/supervisor/conf.d/supervisord.conf \
    && echo 'nodaemon=true' >> /etc/supervisor/conf.d/supervisord.conf \
    && echo 'user=root' >> /etc/supervisor/conf.d/supervisord.conf \
    && echo '' >> /etc/supervisor/conf.d/supervisord.conf \
    && echo '[program:strongswan]' >> /etc/supervisor/conf.d/supervisord.conf \
    && echo 'command=/usr/sbin/ipsec start --nofork' >> /etc/supervisor/conf.d/supervisord.conf \
    && echo 'autostart=true' >> /etc/supervisor/conf.d/supervisord.conf \
    && echo 'autorestart=true' >> /etc/supervisor/conf.d/supervisord.conf \
    && echo 'stderr_logfile=/var/log/pqc-vpn/strongswan.err.log' >> /etc/supervisor/conf.d/supervisord.conf \
    && echo 'stdout_logfile=/var/log/pqc-vpn/strongswan.out.log' >> /etc/supervisor/conf.d/supervisord.conf

# Create entrypoint script
RUN echo '#!/bin/bash' > /entrypoint.sh \
    && echo 'set -e' >> /entrypoint.sh \
    && echo '' >> /entrypoint.sh \
    && echo '# Generate certificates if they do not exist' >> /entrypoint.sh \
    && echo 'if [ ! -f "/opt/pqc-vpn/certs/ca/ca-cert.pem" ]; then' >> /entrypoint.sh \
    && echo '    echo "Generating CA certificate..."' >> /entrypoint.sh \
    && echo '    /opt/pqc-vpn/scripts/generate-pqc-certs.sh --ca' >> /entrypoint.sh \
    && echo 'fi' >> /entrypoint.sh \
    && echo '' >> /entrypoint.sh \
    && echo 'if [ ! -f "/opt/pqc-vpn/certs/hub/hub-cert.pem" ]; then' >> /entrypoint.sh \
    && echo '    echo "Generating hub certificate..."' >> /entrypoint.sh \
    && echo '    HUB_IP=${HUB_IP:-$(hostname -i)}' >> /entrypoint.sh \
    && echo '    /opt/pqc-vpn/scripts/generate-pqc-certs.sh --hub $HUB_IP' >> /entrypoint.sh \
    && echo 'fi' >> /entrypoint.sh \
    && echo '' >> /entrypoint.sh \
    && echo '# Copy certificates to strongSwan directories' >> /entrypoint.sh \
    && echo 'cp /opt/pqc-vpn/certs/ca/ca-cert.pem /etc/ipsec.d/cacerts/' >> /entrypoint.sh \
    && echo 'cp /opt/pqc-vpn/certs/hub/hub-cert.pem /etc/ipsec.d/certs/' >> /entrypoint.sh \
    && echo 'cp /opt/pqc-vpn/certs/hub/hub-key.pem /etc/ipsec.d/private/' >> /entrypoint.sh \
    && echo '' >> /entrypoint.sh \
    && echo '# Set proper permissions' >> /entrypoint.sh \
    && echo 'chmod 644 /etc/ipsec.d/cacerts/*' >> /entrypoint.sh \
    && echo 'chmod 644 /etc/ipsec.d/certs/*' >> /entrypoint.sh \
    && echo 'chmod 600 /etc/ipsec.d/private/*' >> /entrypoint.sh \
    && echo 'chmod 600 /etc/ipsec.secrets' >> /entrypoint.sh \
    && echo '' >> /entrypoint.sh \
    && echo '# Update configuration with environment variables' >> /entrypoint.sh \
    && echo 'if [ -n "$HUB_IP" ]; then' >> /entrypoint.sh \
    && echo '    sed -i "s/%HUB_IP%/$HUB_IP/g" /etc/ipsec.conf' >> /entrypoint.sh \
    && echo 'fi' >> /entrypoint.sh \
    && echo '' >> /entrypoint.sh \
    && echo '# Start supervisor' >> /entrypoint.sh \
    && echo 'exec /usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf' >> /entrypoint.sh \
    && chmod +x /entrypoint.sh

# Expose VPN ports
EXPOSE 500/udp 4500/udp

# Set working directory
WORKDIR /opt/pqc-vpn

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD ipsec status || exit 1

# Default command
ENTRYPOINT ["/entrypoint.sh"]