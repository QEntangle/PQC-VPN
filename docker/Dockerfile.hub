FROM ubuntu:22.04

# Prevent interactive prompts during package installation
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=UTC

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    git \
    wget \
    curl \
    ninja-build \
    pkg-config \
    libtool \
    autotools-dev \
    autoconf \
    automake \
    python3 \
    python3-pip \
    python3-dev \
    libssl-dev \
    libgmp-dev \
    libcurl4-openssl-dev \
    libsqlite3-dev \
    libxml2-dev \
    libpam0g-dev \
    libcap-dev \
    systemd \
    net-tools \
    iproute2 \
    iptables \
    tcpdump \
    netcat-openbsd \
    htop \
    vim \
    jq \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies for real monitoring
RUN pip3 install \
    flask \
    prometheus_client \
    psutil \
    cryptography \
    requests \
    pyyaml \
    subprocess32 \
    ipaddress

# Build and install liboqs (Open Quantum Safe) for PQC algorithms
WORKDIR /tmp
RUN git clone --branch main https://github.com/open-quantum-safe/liboqs.git && \
    cd liboqs && \
    mkdir build && cd build && \
    cmake -GNinja -DCMAKE_INSTALL_PREFIX=/usr/local \
          -DOQS_BUILD_ONLY_LIB=ON \
          -DOQS_MINIMAL_BUILD="KEM_kyber_512;KEM_kyber_768;KEM_kyber_1024;SIG_dilithium_2;SIG_dilithium_3;SIG_dilithium_5;SIG_falcon_512;SIG_falcon_1024" \
          .. && \
    ninja && \
    ninja install && \
    ldconfig

# Build and install oqs-provider for OpenSSL
RUN git clone --branch main https://github.com/open-quantum-safe/oqs-provider.git && \
    cd oqs-provider && \
    cmake -S . -B _build -DCMAKE_BUILD_TYPE=Release && \
    cmake --build _build && \
    cmake --install _build && \
    echo "providers = provider_sect" >> /etc/ssl/openssl.cnf && \
    echo "" >> /etc/ssl/openssl.cnf && \
    echo "[provider_sect]" >> /etc/ssl/openssl.cnf && \
    echo "default = default_sect" >> /etc/ssl/openssl.cnf && \
    echo "oqsprovider = oqsprovider_sect" >> /etc/ssl/openssl.cnf && \
    echo "" >> /etc/ssl/openssl.cnf && \
    echo "[default_sect]" >> /etc/ssl/openssl.cnf && \
    echo "activate = 1" >> /etc/ssl/openssl.cnf && \
    echo "" >> /etc/ssl/openssl.cnf && \
    echo "[oqsprovider_sect]" >> /etc/ssl/openssl.cnf && \
    echo "activate = 1" >> /etc/ssl/openssl.cnf

# Build and install strongSwan with PQC support
RUN git clone --branch 5.9.14 https://github.com/strongswan/strongswan.git && \
    cd strongswan && \
    ./autogen.sh && \
    ./configure \
        --enable-eap-identity \
        --enable-eap-md5 \
        --enable-eap-mschapv2 \
        --enable-eap-tls \
        --enable-eap-ttls \
        --enable-eap-peap \
        --enable-eap-tnc \
        --enable-eap-dynamic \
        --enable-eap-radius \
        --enable-xauth-eap \
        --enable-xauth-pam \
        --enable-dhcp \
        --enable-openssl \
        --enable-curl \
        --enable-sql \
        --enable-sqlite \
        --enable-attr-sql \
        --enable-mediation \
        --enable-unity \
        --enable-cert-cache \
        --enable-ccm \
        --enable-gcm \
        --enable-addrblock \
        --enable-whitelist \
        --enable-ext-auth \
        --enable-counters \
        --enable-lookip \
        --enable-error-notify \
        --enable-systemd \
        --enable-swanctl \
        --enable-vici \
        --enable-pki \
        --enable-acert \
        --with-group=nogroup \
        --sysconfdir=/etc && \
    make -j$(nproc) && \
    make install && \
    ldconfig

# Create strongSwan directories
RUN mkdir -p /etc/ipsec.d/private /etc/ipsec.d/certs /etc/ipsec.d/cacerts /etc/ipsec.d/crls

# Copy PQC certificate generation script
COPY scripts/generate-pqc-certs.sh /usr/local/bin/pqc-keygen
RUN chmod +x /usr/local/bin/pqc-keygen

# Copy real monitoring scripts
COPY tools/real-monitor.py /usr/local/bin/real-monitor
COPY tools/metrics-collector.py /usr/local/bin/metrics-collector
COPY tools/pqc-vpn-manager.py /usr/local/bin/pqc-vpn-manager
RUN chmod +x /usr/local/bin/real-monitor /usr/local/bin/metrics-collector /usr/local/bin/pqc-vpn-manager

# Create web interface directory
RUN mkdir -p /var/www/html

# Copy real web dashboard
COPY web/real-dashboard.html /var/www/html/index.html
COPY web/api_server.py /usr/local/bin/api-server
COPY web/static/ /var/www/html/static/
RUN chmod +x /usr/local/bin/api-server

# Create systemd service files
RUN systemctl enable systemd-resolved

# Create startup script
COPY docker/hub-entrypoint.sh /usr/local/bin/hub-entrypoint.sh
RUN chmod +x /usr/local/bin/hub-entrypoint.sh

# Expose ports
EXPOSE 500/udp 4500/udp 8443/tcp 9090/tcp

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD ipsec status || exit 1

ENTRYPOINT ["/usr/local/bin/hub-entrypoint.sh"]
