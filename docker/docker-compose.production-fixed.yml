# PQC-VPN Fixed Production Deployment
# Run from project root: docker-compose -f docker/docker-compose.production-fixed.yml up -d

version: '3.8'

services:
  # PQC-VPN Hub - Core Service
  pqc-vpn-hub:
    build:
      context: ..  # Fixed: Use parent directory as context
      dockerfile: docker/Dockerfile.pqc-hub
      args:
        - VERSION=${VERSION:-1.0.0}
        - BUILD_TYPE=${BUILD_TYPE:-production}
    container_name: pqc-vpn-hub
    hostname: ${HUB_DOMAIN:-pqc-hub.enterprise.local}
    privileged: true
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
      - NET_RAW
    ports:
      - "${VPN_PORT_IKE:-500}:500/udp"
      - "${VPN_PORT_NATT:-4500}:4500/udp"
      - "${WEB_PORT:-8443}:8443/tcp"
      - "${API_PORT:-9090}:9090/tcp"
      - "${METRICS_PORT:-9100}:9100/tcp"
    environment:
      - HUB_IP=${HUB_IP:-192.168.1.100}
      - HUB_DOMAIN=${HUB_DOMAIN:-pqc-hub.enterprise.local}
      - ORGANIZATION=${ORGANIZATION:-Enterprise}
      - COUNTRY=${COUNTRY:-US}
      - STATE=${STATE:-California}
      - LOCALITY=${LOCALITY:-San Francisco}
      - PQC_KEM_ALGORITHM=${PQC_KEM_ALGORITHM:-kyber1024}
      - PQC_SIG_ALGORITHM=${PQC_SIG_ALGORITHM:-dilithium5}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-ChangeMe123!}
      - SECRET_KEY=${SECRET_KEY}
      - ENTERPRISE_MODE=true
      - HIGH_AVAILABILITY=${HIGH_AVAILABILITY:-false}
      - ENABLE_MONITORING=true
      - ENABLE_API=true
      - ENABLE_METRICS=true
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DEBIAN_FRONTEND=noninteractive
      # Database connection
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=${POSTGRES_DB:-pqc_vpn_enterprise}
      - POSTGRES_USER=${POSTGRES_USER:-pqc_admin}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      # Redis connection
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - pqc-vpn-data:/opt/pqc-vpn/data
      - pqc-vpn-logs:/var/log/pqc-vpn
      - pqc-vpn-certs:/etc/ipsec.d
      - pqc-vpn-config:/etc/pqc-vpn
      - /lib/modules:/lib/modules:ro
      - /dev/net/tun:/dev/net/tun
    networks:
      pqc-enterprise-network:
        ipv4_address: 172.30.1.10
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8443/health", "||", "exit", "1"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 120s
    depends_on:
      - postgres
      - redis

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: pqc-postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-pqc_vpn_enterprise}
      - POSTGRES_USER=${POSTGRES_USER:-pqc_admin}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-SecurePassword123!}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - pqc-postgres-data:/var/lib/postgresql/data
      - pqc-postgres-backups:/var/backups/postgresql
    networks:
      - pqc-enterprise-network
    restart: unless-stopped
    ports:
      - "${POSTGRES_EXTERNAL_PORT:-15432}:5432"  # Use non-conflicting port
    command: >
      postgres 
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-pqc_admin} -d ${POSTGRES_DB:-pqc_vpn_enterprise}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: pqc-redis
    command: >
      redis-server 
      --appendonly yes 
      --requirepass ${REDIS_PASSWORD:-SecureRedis123!}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 300
      --timeout 0
      --tcp-backlog 511
      --databases 16
    ports:
      - "${REDIS_EXTERNAL_PORT:-16379}:6379"  # Use non-conflicting port
    volumes:
      - pqc-redis-data:/data
    networks:
      - pqc-enterprise-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Metrics (Optional - enable with monitoring profile)
  prometheus:
    image: prom/prometheus:latest
    container_name: pqc-prometheus
    ports:
      - "${PROMETHEUS_EXTERNAL_PORT:-19090}:9090"  # Use non-conflicting port
    volumes:
      - pqc-prometheus-data:/prometheus
      - ../configs/prometheus:/etc/prometheus:ro  # Mount from configs if exists
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=90d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.enable-lifecycle'
    networks:
      - pqc-enterprise-network
    restart: unless-stopped
    depends_on:
      - pqc-vpn-hub
    profiles: ["monitoring"]
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana Dashboard (Optional - enable with monitoring profile)
  grafana:
    image: grafana/grafana:latest
    container_name: pqc-grafana
    ports:
      - "${GRAFANA_EXTERNAL_PORT:-13000}:3000"  # Use non-conflicting port
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-SecureGrafana123!}
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY}
      - GF_SERVER_ROOT_URL=http://localhost:${GRAFANA_EXTERNAL_PORT:-13000}
    volumes:
      - pqc-grafana-data:/var/lib/grafana
    networks:
      - pqc-enterprise-network
    depends_on:
      - prometheus
      - postgres
    restart: unless-stopped
    profiles: ["monitoring"]
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  # Application Data
  pqc-vpn-data:
    driver: local
  pqc-vpn-logs:
    driver: local
  pqc-vpn-certs:
    driver: local
  pqc-vpn-config:
    driver: local

  # Database Volumes
  pqc-postgres-data:
    driver: local
  pqc-postgres-backups:
    driver: local
  pqc-redis-data:
    driver: local

  # Monitoring Volumes (only created when monitoring profile is used)
  pqc-prometheus-data:
    driver: local
  pqc-grafana-data:
    driver: local

networks:
  pqc-enterprise-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16
          gateway: 172.30.0.1

# USAGE EXAMPLES:
#
# Basic deployment (core services only):
#   docker-compose -f docker/docker-compose.production-fixed.yml up -d
#
# With monitoring:
#   docker-compose -f docker/docker-compose.production-fixed.yml --profile monitoring up -d
#
# Stop all services:
#   docker-compose -f docker/docker-compose.production-fixed.yml down
#
# Remove all data (CAUTION - will delete all data):
#   docker-compose -f docker/docker-compose.production-fixed.yml down -v