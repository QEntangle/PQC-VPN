version: '3.8'

# PQC-VPN Enterprise Production Deployment
# Fixed Docker Compose with Enterprise Dashboard Integration

services:
  # PostgreSQL Database with optimized settings
  postgres:
    image: postgres:15-alpine
    container_name: pqc-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-pqc_vpn_enterprise}
      POSTGRES_USER: ${POSTGRES_USER:-pqc_admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-DemoPostgres123!}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=peer"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "${POSTGRES_EXTERNAL_PORT:-15432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-pqc_admin} -d ${POSTGRES_DB:-pqc_vpn_enterprise}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - pqc-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Redis Cache with persistence
  redis:
    image: redis:7-alpine
    container_name: pqc-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-DemoRedis123!} --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_EXTERNAL_PORT:-16379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - pqc-network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # PQC-VPN Hub Server with Enterprise Features
  pqc-vpn-hub:
    build:
      context: .
      dockerfile: docker/Dockerfile.pqc-hub.fixed
      args:
        - HUB_IP=${HUB_IP:-192.168.1.100}
        - ORGANIZATION=${ORGANIZATION:-DemoEnterprise}
        - COUNTRY=${COUNTRY:-US}
        - STATE=${STATE:-California}
        - LOCALITY=${LOCALITY:-Demo}
    container_name: pqc-vpn-hub
    restart: unless-stopped
    privileged: true
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    environment:
      - HUB_IP=${HUB_IP:-192.168.1.100}
      - HUB_DOMAIN=${HUB_DOMAIN:-pqc-hub.demo.local}
      - ORGANIZATION=${ORGANIZATION:-DemoEnterprise}
      - COUNTRY=${COUNTRY:-US}
      - STATE=${STATE:-California}
      - LOCALITY=${LOCALITY:-Demo}
      - PQC_KEM_ALGORITHM=${PQC_KEM_ALGORITHM:-kyber1024}
      - PQC_SIG_ALGORITHM=${PQC_SIG_ALGORITHM:-dilithium5}
      - ENTERPRISE_MODE=${ENTERPRISE_MODE:-true}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-pqc_vpn_enterprise}
      - POSTGRES_USER=${POSTGRES_USER:-pqc_admin}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-DemoPostgres123!}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-DemoRedis123!}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-pqc_admin}:${POSTGRES_PASSWORD:-DemoPostgres123!}@postgres:5432/${POSTGRES_DB:-pqc_vpn_enterprise}
    volumes:
      - pqc_configs:/etc/ipsec.d
      - pqc_logs:/var/log/pqc-vpn
      - pqc_data:/opt/pqc-vpn/data
      - ./tools:/opt/pqc-vpn/tools:ro
      - ./web:/opt/pqc-vpn/web:ro
      - ./configs:/opt/pqc-vpn/configs:ro
      - /lib/modules:/lib/modules:ro
    ports:
      - "${VPN_PORT_IKE:-500}:500/udp"
      - "${VPN_PORT_NATT:-4500}:4500/udp"
    networks:
      pqc-network:
        ipv4_address: 172.20.0.10
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "ipsec", "status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Enterprise Web Dashboard
  web-dashboard:
    build:
      context: .
      dockerfile: docker/Dockerfile.web-dashboard
      args:
        - VERSION=${VERSION:-1.0.0}
    container_name: pqc-web-dashboard
    restart: unless-stopped
    environment:
      - SECRET_KEY=${SECRET_KEY:-demo-secret-key-for-testing-only-32chars}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-DemoAdmin123!}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-pqc_admin}:${POSTGRES_PASSWORD:-DemoPostgres123!}@postgres:5432/${POSTGRES_DB:-pqc_vpn_enterprise}
      - REDIS_HOST=redis
      - REDIS_EXTERNAL_PORT=${REDIS_EXTERNAL_PORT:-16379}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-DemoRedis123!}
      - WEB_PORT=${WEB_PORT:-8443}
      - ENTERPRISE_MODE=${ENTERPRISE_MODE:-true}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - pqc_logs:/var/log/pqc-vpn
      - pqc_data:/opt/pqc-vpn/data
      - ./web:/opt/pqc-vpn/web:ro
    ports:
      - "${WEB_PORT:-8443}:8443"
    networks:
      - pqc-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      pqc-vpn-hub:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-k", "-f", "https://localhost:8443/api/enterprise/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # API Server with Enterprise Features
  api-server:
    build:
      context: .
      dockerfile: docker/Dockerfile.api-server
    container_name: pqc-api-server
    restart: unless-stopped
    environment:
      - SECRET_KEY=${SECRET_KEY:-demo-secret-key-for-testing-only-32chars}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-pqc_admin}:${POSTGRES_PASSWORD:-DemoPostgres123!}@postgres:5432/${POSTGRES_DB:-pqc_vpn_enterprise}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-DemoRedis123!}
      - API_PORT=${API_PORT:-9090}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - pqc_logs:/var/log/pqc-vpn
      - pqc_data:/opt/pqc-vpn/data
      - ./web:/opt/pqc-vpn/web:ro
      - ./tools:/opt/pqc-vpn/tools:ro
    ports:
      - "${API_PORT:-9090}:9090"
    networks:
      - pqc-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      pqc-vpn-hub:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-k", "-f", "https://localhost:9090/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring Services (Optional - Profile: monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: pqc-prometheus
    restart: unless-stopped
    profiles: ["monitoring"]
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./configs/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_EXTERNAL_PORT:-19090}:9090"
    networks:
      - pqc-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  grafana:
    image: grafana/grafana:latest
    container_name: pqc-grafana
    restart: unless-stopped
    profiles: ["monitoring"]
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-DemoGrafana123!}
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY:-demo-grafana-secret-key-32chars}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./configs/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "${GRAFANA_EXTERNAL_PORT:-13000}:3000"
    networks:
      - pqc-network
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Metrics Exporter for VPN Statistics
  metrics-exporter:
    build:
      context: .
      dockerfile: docker/Dockerfile.metrics-exporter
    container_name: pqc-metrics-exporter
    restart: unless-stopped
    profiles: ["monitoring"]
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-pqc_admin}:${POSTGRES_PASSWORD:-DemoPostgres123!}@postgres:5432/${POSTGRES_DB:-pqc_vpn_enterprise}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-DemoRedis123!}
      - METRICS_PORT=${METRICS_PORT:-9100}
    volumes:
      - pqc_logs:/var/log/pqc-vpn:ro
      - ./tools:/opt/pqc-vpn/tools:ro
    ports:
      - "${METRICS_PORT:-9100}:9100"
    networks:
      - pqc-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      pqc-vpn-hub:
        condition: service_healthy

  # Demo Client Simulators (Optional - Profile: demo)
  demo-client-1:
    build:
      context: .
      dockerfile: docker/Dockerfile.pqc-spoke
      args:
        - CLIENT_NAME=demo-client-1
        - AUTH_TYPE=pki
    container_name: demo-client-1
    restart: unless-stopped
    profiles: ["demo"]
    privileged: true
    cap_add:
      - NET_ADMIN
    environment:
      - HUB_IP=${HUB_IP:-192.168.1.100}
      - CLIENT_NAME=demo-client-1
      - AUTH_TYPE=pki
      - AUTO_CONNECT=${AUTO_CONNECT:-false}
    volumes:
      - demo_client_1_data:/etc/ipsec.d
      - /lib/modules:/lib/modules:ro
    networks:
      - pqc-network
    depends_on:
      - pqc-vpn-hub

  demo-client-2:
    build:
      context: .
      dockerfile: docker/Dockerfile.pqc-spoke
      args:
        - CLIENT_NAME=demo-client-2
        - AUTH_TYPE=psk
    container_name: demo-client-2
    restart: unless-stopped
    profiles: ["demo"]
    privileged: true
    cap_add:
      - NET_ADMIN
    environment:
      - HUB_IP=${HUB_IP:-192.168.1.100}
      - CLIENT_NAME=demo-client-2
      - AUTH_TYPE=psk
      - PSK_KEY=DemoSharedSecret123!
      - AUTO_CONNECT=${AUTO_CONNECT:-false}
    volumes:
      - demo_client_2_data:/etc/ipsec.d
      - /lib/modules:/lib/modules:ro
    networks:
      - pqc-network
    depends_on:
      - pqc-vpn-hub

  demo-client-3:
    build:
      context: .
      dockerfile: docker/Dockerfile.pqc-spoke
      args:
        - CLIENT_NAME=demo-client-3
        - AUTH_TYPE=pki
    container_name: demo-client-3
    restart: unless-stopped
    profiles: ["demo"]
    privileged: true
    cap_add:
      - NET_ADMIN
    environment:
      - HUB_IP=${HUB_IP:-192.168.1.100}
      - CLIENT_NAME=demo-client-3
      - AUTH_TYPE=pki
      - AUTO_CONNECT=${AUTO_CONNECT:-false}
    volumes:
      - demo_client_3_data:/etc/ipsec.d
      - /lib/modules:/lib/modules:ro
    networks:
      - pqc-network
    depends_on:
      - pqc-vpn-hub

# Network Configuration
networks:
  pqc-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1

# Volume Configuration
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres
  
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis
  
  pqc_configs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/ipsec
  
  pqc_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs
  
  pqc_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/pqc-vpn
  
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/prometheus
  
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/grafana
  
  demo_client_1_data:
    driver: local
  
  demo_client_2_data:
    driver: local
  
  demo_client_3_data:
    driver: local

# Environment Configuration
# Copy .env.example to .env and customize for your deployment
