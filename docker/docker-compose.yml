services:
  pqc-vpn-hub:
    image: ubuntu:22.04
    container_name: pqc-vpn-hub
    privileged: true
    ports:
      - "500:500/udp"
      - "4500:4500/udp"
      - "8443:8443/tcp"
    environment:
      - HUB_IP=${HUB_IP:-192.168.0.103}
      - DEBIAN_FRONTEND=noninteractive
      - ENABLE_HA=${ENABLE_HA:-false}
      - ENABLE_MONITORING=${ENABLE_MONITORING:-true}
    command: |
      bash -c "
      echo 'üöÄ PQC-VPN Hub Starting...' &&
      apt-get update -qq &&
      apt-get install -y strongswan strongswan-pki strongswan-charon python3 curl net-tools iproute2 &&
      echo '‚úÖ StrongSwan installed successfully' &&
      
      # Create enhanced strongSwan configuration with PQC-ready settings
      cat > /etc/ipsec.conf << 'EOF'
      config setup
          charondebug=\"cfg 2, dmn 2, ike 2, net 2\"
          uniqueids=yes
          cachecrls=no
          strictcrlpolicy=no
      
      conn %default
          keyexchange=ikev2
          dpdaction=clear
          dpddelay=300s
          rekey=no
          left=%any
          leftsubnet=0.0.0.0/0
          right=%any
          rightsubnet=10.10.0.0/16
          leftfirewall=yes
          rightfirewall=yes
      
      # PQC-ready PSK connection
      conn pqc-psk-demo
          keyexchange=ikev2
          auto=add
          type=tunnel
          leftauth=psk
          rightauth=psk
          leftid=@hub.pqc-vpn.local
          rightid=@spoke.pqc-vpn.local
          # Future: PQC algorithms will be: ike=aes256gcm16-sha512-mlkem1024-mldsa87
          ike=aes256gcm16-sha512-ecp384!
          esp=aes256gcm16-sha512!
          
      # PKI connection template
      conn pqc-pki-demo
          keyexchange=ikev2
          auto=add
          type=tunnel
          leftauth=pubkey
          rightauth=pubkey
          leftcert=hub-cert.pem
          leftid=\"C=US, O=PQC-VPN, CN=hub.pqc-vpn.local\"
          rightid=\"C=US, O=PQC-VPN, CN=spoke.pqc-vpn.local\"
          ike=aes256gcm16-sha512-ecp384!
          esp=aes256gcm16-sha512!
      
      # Hybrid PKI+PSK connection
      conn pqc-hybrid-demo
          keyexchange=ikev2
          auto=add
          type=tunnel
          leftauth=pubkey
          rightauth=psk
          leftcert=hub-cert.pem
          leftid=\"C=US, O=PQC-VPN, CN=hub.pqc-vpn.local\"
          rightid=@hybrid-spoke.pqc-vpn.local
          ike=aes256gcm16-sha512-ecp384!
          esp=aes256gcm16-sha512!
      EOF
      
      # Create IPsec secrets with demo credentials
      cat > /etc/ipsec.secrets << 'EOF'
      # PSK secrets for demo
      @hub.pqc-vpn.local @spoke.pqc-vpn.local : PSK \"pqc-demo-key-2025-secure\"
      @hub.pqc-vpn.local @hybrid-spoke.pqc-vpn.local : PSK \"hybrid-demo-key-2025\"
      
      # Additional demo PSKs
      demo-user-1 : PSK \"user1-pqc-key-2025\"
      demo-user-2 : PSK \"user2-pqc-key-2025\"
      admin-access : PSK \"admin-pqc-key-2025-ultra-secure\"
      EOF
      
      # Generate demo certificates (self-signed for demo)
      mkdir -p /etc/ipsec.d/private /etc/ipsec.d/certs /etc/ipsec.d/cacerts &&
      
      # Generate CA certificate
      ipsec pki --gen --type rsa --size 4096 --outform pem > /etc/ipsec.d/private/ca-key.pem &&
      ipsec pki --self --ca --lifetime 3650 --in /etc/ipsec.d/private/ca-key.pem \
          --type rsa --dn 'C=US, O=PQC-VPN Demo, CN=PQC-VPN Demo CA' \
          --outform pem > /etc/ipsec.d/cacerts/ca-cert.pem &&
      
      # Generate hub certificate
      ipsec pki --gen --type rsa --size 4096 --outform pem > /etc/ipsec.d/private/hub-key.pem &&
      ipsec pki --pub --in /etc/ipsec.d/private/hub-key.pem --type rsa | \
          ipsec pki --issue --lifetime 365 --cacert /etc/ipsec.d/cacerts/ca-cert.pem \
          --cakey /etc/ipsec.d/private/ca-key.pem --dn 'C=US, O=PQC-VPN, CN=hub.pqc-vpn.local' \
          --san hub.pqc-vpn.local --flag serverAuth --flag ikeIntermediate \
          --outform pem > /etc/ipsec.d/certs/hub-cert.pem &&
      
      echo 'üîê Demo certificates generated' &&
      
      # Set proper permissions
      chmod 600 /etc/ipsec.d/private/* &&
      chmod 644 /etc/ipsec.d/certs/* &&
      chmod 644 /etc/ipsec.d/cacerts/* &&
      chmod 600 /etc/ipsec.secrets &&
      
      # Start strongSwan
      echo 'üîê Starting strongSwan daemon...' &&
      ipsec start &&
      sleep 3 &&
      ipsec status &&
      
      # Create demo web interface
      mkdir -p /var/www &&
      cat > /var/www/index.html << 'EOF'
      <!DOCTYPE html>
      <html lang=\"en\">
      <head>
          <meta charset=\"UTF-8\">
          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">
          <title>PQC-VPN Hub Status</title>
          <style>
              * { margin: 0; padding: 0; box-sizing: border-box; }
              body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); min-height: 100vh; color: #333; }
              .container { max-width: 1000px; margin: 0 auto; padding: 20px; }
              .header { text-align: center; color: white; margin-bottom: 30px; }
              .status-card { background: white; border-radius: 15px; padding: 25px; margin: 20px 0; box-shadow: 0 8px 25px rgba(0,0,0,0.1); }
              .status-online { background: #2ecc71; color: white; padding: 15px; border-radius: 8px; text-align: center; margin: 15px 0; }
              .config-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 15px; margin: 20px 0; }
              .config-item { background: #f8f9fa; padding: 15px; border-radius: 8px; border-left: 4px solid #3498db; }
              .connections { background: #e8f5e8; padding: 15px; border-radius: 8px; margin: 15px 0; }
              .feature-list { list-style: none; }
              .feature-list li { padding: 8px 0; color: #27ae60; }
              .feature-list li:before { content: '‚úÖ '; margin-right: 10px; }
              .link-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 10px; margin: 20px 0; }
              .link-button { display: block; background: #3498db; color: white; padding: 12px; text-decoration: none; border-radius: 6px; text-align: center; transition: background 0.3s; }
              .link-button:hover { background: #2980b9; }
              .demo-info { background: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; border-radius: 8px; margin: 15px 0; }
          </style>
      </head>
      <body>
          <div class=\"container\">
              <div class=\"header\">
                  <h1>üîê PQC-VPN Hub Control Center</h1>
                  <p>Post-Quantum Cryptography VPN Solution v2.0.0</p>
              </div>
              
              <div class=\"status-card\">
                  <h2>üöÄ System Status</h2>
                  <div class=\"status-online\" id=\"status\">‚úÖ Hub Online & Operational</div>
                  
                  <div class=\"config-grid\">
                      <div class=\"config-item\">
                          <h4>üì° Network Configuration</h4>
                          <p><strong>Hub IP:</strong> 192.168.0.103</p>
                          <p><strong>VPN Subnet:</strong> 10.10.0.0/16</p>
                          <p><strong>Ports:</strong> UDP 500, 4500</p>
                      </div>
                      
                      <div class=\"config-item\">
                          <h4>üîê Cryptography</h4>
                          <p><strong>IKE:</strong> AES-256-GCM + ECP-384</p>
                          <p><strong>ESP:</strong> AES-256-GCM + SHA-512</p>
                          <p><strong>PQC Ready:</strong> Kyber-1024, Dilithium-5</p>
                      </div>
                      
                      <div class=\"config-item\">
                          <h4>üë• Authentication</h4>
                          <p><strong>PKI:</strong> RSA-4096 certificates</p>
                          <p><strong>PSK:</strong> Pre-shared keys</p>
                          <p><strong>Hybrid:</strong> PKI + PSK combined</p>
                      </div>
                      
                      <div class=\"config-item\">
                          <h4>‚è±Ô∏è Uptime</h4>
                          <p id=\"uptime\">Starting...</p>
                          <p><strong>Version:</strong> PQC-VPN v2.0.0</p>
                          <p><strong>Engine:</strong> strongSwan 5.9+</p>
                      </div>
                  </div>
              </div>
              
              <div class=\"status-card\">
                  <h2>üåê Available Connections</h2>
                  <div class=\"connections\">
                      <h4>Demo Connection Profiles:</h4>
                      <ul class=\"feature-list\">
                          <li><strong>pqc-psk-demo:</strong> PSK Authentication with PQC-ready algorithms</li>
                          <li><strong>pqc-pki-demo:</strong> Certificate-based authentication</li>
                          <li><strong>pqc-hybrid-demo:</strong> Combined PKI + PSK for maximum security</li>
                      </ul>
                  </div>
              </div>
              
              <div class=\"status-card\">
                  <h2>üõ†Ô∏è Management & Monitoring</h2>
                  <div class=\"link-grid\">
                      <a href=\"http://localhost:8080\" class=\"link-button\">üè† Main Dashboard</a>
                      <a href=\"http://localhost:3000\" class=\"link-button\">üìà Grafana Monitor</a>
                      <a href=\"http://localhost:9090\" class=\"link-button\">üìä Prometheus Metrics</a>
                      <a href=\"#\" onclick=\"showConfig()\" class=\"link-button\">‚öôÔ∏è View Config</a>
                  </div>
              </div>
              
              <div class=\"demo-info\">
                  <h3>üé≠ Demo Information</h3>
                  <p><strong>Purpose:</strong> This is a demonstration of PQC-VPN capabilities</p>
                  <p><strong>Credentials:</strong> Grafana: admin/admin | Demo PSK: pqc-demo-key-2025-secure</p>
                  <p><strong>Note:</strong> Use proper certificates and keys for production deployment</p>
              </div>
          </div>
          
          <script>
              let startTime = Date.now();
              
              function updateStatus() {
                  const uptime = Math.floor((Date.now() - startTime) / 1000);
                  const hours = Math.floor(uptime / 3600);
                  const minutes = Math.floor((uptime % 3600) / 60);
                  const seconds = uptime % 60;
                  
                  document.getElementById('uptime').textContent = 
                      hours + 'h ' + minutes + 'm ' + seconds + 's';
                  
                  document.getElementById('status').textContent = 
                      '‚úÖ Hub Online & Operational - ' + new Date().toLocaleTimeString();
              }
              
              function showConfig() {
                  alert('Demo Config:\\n\\n' +
                        'Hub IP: 192.168.0.103\\n' +
                        'VPN Network: 10.10.0.0/16\\n' +
                        'IKE Algorithms: AES-256-GCM + ECP-384\\n' +
                        'ESP Algorithms: AES-256-GCM + SHA-512\\n' +
                        'PQC Ready: Kyber-1024, Dilithium-5\\n\\n' +
                        'Authentication Methods:\\n' +
                        '- PKI: X.509 certificates\\n' +
                        '- PSK: Pre-shared keys\\n' +
                        '- Hybrid: PKI + PSK combined');
              }
              
              setInterval(updateStatus, 1000);
              updateStatus();
          </script>
      </body>
      </html>
      EOF
      
      # Start web interface
      echo 'üåê Starting web interface on port 8443...' &&
      cd /var/www &&
      python3 -m http.server 8443 --bind 0.0.0.0 &
      
      echo '‚úÖ PQC-VPN Hub Demo Ready!' &&
      echo 'üì± Web Interface: http://localhost:8443' &&
      echo 'üîê VPN Status: strongSwan Running' &&
      echo 'üìä Dashboard: http://localhost:8080' &&
      echo 'üìà Monitoring: http://localhost:3000' &&
      
      # Keep container running
      tail -f /dev/null
      "
    restart: unless-stopped
    volumes:
      - pqc-vpn-logs:/var/log/strongswan
      - pqc-vpn-config:/etc/ipsec.d
    networks:
      - pqc-vpn-network

  web-dashboard:
    image: nginx:alpine
    container_name: pqc-web-dashboard
    ports:
      - "8080:80"
    volumes:
      - ../web:/usr/share/nginx/html:ro
    restart: unless-stopped
    depends_on:
      - pqc-vpn-hub
    networks:
      - pqc-vpn-network

  grafana:
    image: grafana/grafana:latest
    container_name: pqc-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_SECURITY_ADMIN_USER=admin
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
      - GF_SERVER_ROOT_URL=http://localhost:3000
    volumes:
      - grafana-data:/var/lib/grafana
    restart: unless-stopped
    profiles:
      - monitoring
    networks:
      - pqc-vpn-network

  prometheus:
    image: prom/prometheus:latest
    container_name: pqc-prometheus
    ports:
      - "9090:9090"
    volumes:
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    profiles:
      - monitoring
    networks:
      - pqc-vpn-network

  # Test spoke clients for demo
  pqc-vpn-spoke-alice:
    image: ubuntu:22.04
    container_name: pqc-spoke-alice
    privileged: true
    environment:
      - HUB_IP=${HUB_IP:-192.168.0.103}
      - USER_ID=alice
      - AUTH_TYPE=psk
    command: |
      bash -c "
      echo 'üöÄ Spoke Alice connecting...' &&
      apt-get update -qq &&
      apt-get install -y strongswan curl &&
      
      cat > /etc/ipsec.conf << 'EOF'
      config setup
          charondebug=\"cfg 2, dmn 2, ike 2\"
          uniqueids=yes
      
      conn hub
          keyexchange=ikev2
          auto=start
          type=tunnel
          leftauth=psk
          rightauth=psk
          leftid=@spoke.pqc-vpn.local
          rightid=@hub.pqc-vpn.local
          right=192.168.0.103
          rightsubnet=0.0.0.0/0
          ike=aes256gcm16-sha512-ecp384!
          esp=aes256gcm16-sha512!
      EOF
      
      echo '@spoke.pqc-vpn.local @hub.pqc-vpn.local : PSK \"pqc-demo-key-2025-secure\"' > /etc/ipsec.secrets &&
      chmod 600 /etc/ipsec.secrets &&
      
      echo 'üîê Starting Alice spoke connection...' &&
      ipsec start &&
      sleep 5 &&
      ipsec up hub &&
      
      echo '‚úÖ Alice connected to PQC-VPN Hub' &&
      tail -f /dev/null
      "
    restart: unless-stopped
    profiles:
      - spokes
    networks:
      - pqc-vpn-network
    depends_on:
      - pqc-vpn-hub

  pqc-vpn-spoke-bob:
    image: ubuntu:22.04
    container_name: pqc-spoke-bob
    privileged: true
    environment:
      - HUB_IP=${HUB_IP:-192.168.0.103}
      - USER_ID=bob
      - AUTH_TYPE=psk
    command: |
      bash -c "
      echo 'üöÄ Spoke Bob connecting...' &&
      apt-get update -qq &&
      apt-get install -y strongswan curl &&
      
      cat > /etc/ipsec.conf << 'EOF'
      config setup
          charondebug=\"cfg 2, dmn 2, ike 2\"
          uniqueids=yes
      
      conn hub
          keyexchange=ikev2
          auto=start
          type=tunnel
          leftauth=psk
          rightauth=psk
          leftid=demo-user-1
          rightid=@hub.pqc-vpn.local
          right=192.168.0.103
          rightsubnet=0.0.0.0/0
          ike=aes256gcm16-sha512-ecp384!
          esp=aes256gcm16-sha512!
      EOF
      
      echo 'demo-user-1 : PSK \"user1-pqc-key-2025\"' > /etc/ipsec.secrets &&
      chmod 600 /etc/ipsec.secrets &&
      
      echo 'üîê Starting Bob spoke connection...' &&
      ipsec start &&
      sleep 7 &&
      ipsec up hub &&
      
      echo '‚úÖ Bob connected to PQC-VPN Hub' &&
      tail -f /dev/null
      "
    restart: unless-stopped
    profiles:
      - spokes
    networks:
      - pqc-vpn-network
    depends_on:
      - pqc-vpn-hub

volumes:
  pqc-vpn-logs:
    driver: local
  pqc-vpn-config:
    driver: local
  grafana-data:
    driver: local
  prometheus-data:
    driver: local

networks:
  pqc-vpn-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
