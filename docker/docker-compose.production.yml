# PQC-VPN Enterprise Production Deployment
# Docker Compose configuration for PQC-VPN v1.0.0
# Enterprise-grade Post-Quantum Cryptography VPN solution

version: '3.8'

services:
  # PQC-VPN Hub - Enterprise Grade
  pqc-vpn-hub:
    build:
      context: .
      dockerfile: docker/Dockerfile.pqc-hub
      args:
        - VERSION=1.0.0
        - BUILD_TYPE=production
    container_name: pqc-vpn-hub
    hostname: pqc-hub.enterprise.local
    privileged: true
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
      - NET_RAW
    ports:
      - "${VPN_PORT_IKE:-500}:500/udp"
      - "${VPN_PORT_NATT:-4500}:4500/udp"
      - "${WEB_PORT:-8443}:8443/tcp"
      - "${API_PORT:-9090}:9090/tcp"
      - "${METRICS_PORT:-9100}:9100/tcp"
    environment:
      - HUB_IP=${HUB_IP:-192.168.1.100}
      - HUB_DOMAIN=${HUB_DOMAIN:-pqc-hub.enterprise.local}
      - ORGANIZATION=${ORGANIZATION:-Enterprise}
      - COUNTRY=${COUNTRY:-US}
      - STATE=${STATE:-California}
      - LOCALITY=${LOCALITY:-San Francisco}
      - PQC_KEM_ALGORITHM=${PQC_KEM_ALGORITHM:-kyber1024}
      - PQC_SIG_ALGORITHM=${PQC_SIG_ALGORITHM:-dilithium5}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-ChangeMe123!}
      - SECRET_KEY=${SECRET_KEY:-$(openssl rand -hex 32)}
      - ENTERPRISE_MODE=true
      - HIGH_AVAILABILITY=${HIGH_AVAILABILITY:-false}
      - ENABLE_MONITORING=true
      - ENABLE_API=true
      - ENABLE_METRICS=true
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DEBIAN_FRONTEND=noninteractive
    volumes:
      - pqc-vpn-data:/opt/pqc-vpn/data
      - pqc-vpn-logs:/var/log/pqc-vpn
      - pqc-vpn-certs:/etc/ipsec.d
      - pqc-vpn-config:/etc/pqc-vpn
      - pqc-vpn-backups:/var/backups/pqc-vpn
      - /lib/modules:/lib/modules:ro
      - /dev/net/tun:/dev/net/tun
    networks:
      pqc-enterprise-network:
        ipv4_address: 172.30.1.10
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "/usr/local/bin/pqc-vpn-manager", "status", "--quick"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 120s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pqc-vpn.rule=Host(`${HUB_DOMAIN}`)"
      - "traefik.http.routers.pqc-vpn.tls=true"

  # PostgreSQL Database - Enterprise Grade
  postgres:
    image: postgres:15-alpine
    container_name: pqc-postgres
    environment:
      - POSTGRES_DB=pqc_vpn_enterprise
      - POSTGRES_USER=pqc_admin
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-SecurePassword123!}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - pqc-postgres-data:/var/lib/postgresql/data
      - ./sql/enterprise-init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./sql/enterprise-schema.sql:/docker-entrypoint-initdb.d/02-schema.sql
      - ./sql/enterprise-data.sql:/docker-entrypoint-initdb.d/03-data.sql
      - pqc-postgres-backups:/var/backups/postgresql
    networks:
      - pqc-enterprise-network
    restart: unless-stopped
    command: >
      postgres 
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pqc_admin -d pqc_vpn_enterprise"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache - Enterprise Grade
  redis:
    image: redis:7-alpine
    container_name: pqc-redis
    command: >
      redis-server 
      --appendonly yes 
      --requirepass ${REDIS_PASSWORD:-SecureRedis123!}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 300
      --timeout 0
      --tcp-backlog 511
      --databases 16
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - pqc-redis-data:/data
      - pqc-redis-config:/usr/local/etc/redis
    networks:
      - pqc-enterprise-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: pqc-prometheus
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/rules:/etc/prometheus/rules
      - pqc-prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=90d'
      - '--storage.tsdb.retention.size=50GB'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--web.enable-remote-write-receiver'
      - '--enable-feature=exemplar-storage'
    networks:
      - pqc-enterprise-network
    restart: unless-stopped
    depends_on:
      - pqc-vpn-hub
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana Monitoring Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: pqc-grafana
    ports:
      - "127.0.0.1:3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-SecureGrafana123!}
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY:-$(openssl rand -hex 32)}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel,grafana-clock-panel
      - GF_SERVER_ROOT_URL=https://${HUB_DOMAIN:-localhost}:3000
      - GF_FEATURE_TOGGLES_ENABLE=ngalert
      - GF_ALERTING_ENABLED=true
      - GF_UNIFIED_ALERTING_ENABLED=true
      - GF_DATABASE_TYPE=postgres
      - GF_DATABASE_HOST=postgres:5432
      - GF_DATABASE_NAME=grafana
      - GF_DATABASE_USER=grafana_user
      - GF_DATABASE_PASSWORD=${GRAFANA_DB_PASSWORD:-GrafanaDB123!}
      - GF_SESSION_PROVIDER=redis
      - GF_SESSION_PROVIDER_CONFIG=addr=redis:6379,pool_size=100,db=grafana
    volumes:
      - pqc-grafana-data:/var/lib/grafana
      - pqc-grafana-config:/etc/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
      - ./monitoring/grafana/alerting:/etc/grafana/provisioning/alerting
    networks:
      - pqc-enterprise-network
    depends_on:
      - prometheus
      - postgres
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # NGINX Load Balancer
  nginx-lb:
    image: nginx:alpine
    container_name: pqc-nginx-lb
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/html:/usr/share/nginx/html
      - ./nginx/conf.d:/etc/nginx/conf.d
      - pqc-nginx-logs:/var/log/nginx
    networks:
      - pqc-enterprise-network
    depends_on:
      - pqc-vpn-hub
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles: ["loadbalancer", "production"]

  # Elasticsearch for Log Management
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: pqc-elasticsearch
    environment:
      - node.name=pqc-es-node-01
      - cluster.name=pqc-vpn-cluster
      - discovery.type=single-node
      - xpack.security.enabled=true
      - xpack.security.authc.basic.enabled=true
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD:-ElasticSearch123!}
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - pqc-elasticsearch-data:/usr/share/elasticsearch/data
      - pqc-elasticsearch-config:/usr/share/elasticsearch/config
    networks:
      - pqc-enterprise-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -q '\"status\":\"green\"'"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles: ["logging", "enterprise"]

  # Logstash for Log Processing
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: pqc-logstash
    environment:
      - xpack.monitoring.enabled=true
      - xpack.monitoring.elasticsearch.hosts=["http://elasticsearch:9200"]
      - xpack.monitoring.elasticsearch.username=elastic
      - xpack.monitoring.elasticsearch.password=${ELASTIC_PASSWORD:-ElasticSearch123!}
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline
      - ./monitoring/logstash/config:/usr/share/logstash/config
      - pqc-vpn-logs:/var/log/pqc-vpn:ro
      - pqc-logstash-data:/usr/share/logstash/data
    networks:
      - pqc-enterprise-network
    depends_on:
      - elasticsearch
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9600/_node/stats || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles: ["logging", "enterprise"]

  # Kibana for Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: pqc-kibana
    ports:
      - "127.0.0.1:5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD:-ElasticSearch123!}
      - KIBANA_SYSTEM_PASSWORD=${KIBANA_PASSWORD:-Kibana123!}
      - xpack.security.enabled=true
      - xpack.encryptedSavedObjects.encryptionKey=${KIBANA_ENCRYPTION_KEY:-$(openssl rand -hex 32)}
    volumes:
      - pqc-kibana-data:/usr/share/kibana/data
    networks:
      - pqc-enterprise-network
    depends_on:
      - elasticsearch
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles: ["logging", "enterprise"]

  # RADIUS Server for Enterprise Authentication
  freeradius:
    image: freeradius/freeradius-server:latest
    container_name: pqc-freeradius
    ports:
      - "1812:1812/udp"
      - "1813:1813/udp"
    environment:
      - RADIUS_SECRET=${RADIUS_SECRET:-RadiusSecret123!}
    volumes:
      - ./radius/clients.conf:/etc/freeradius/clients.conf
      - ./radius/users:/etc/freeradius/users
      - ./radius/certs:/etc/freeradius/certs
      - pqc-radius-data:/var/log/freeradius
      - pqc-radius-config:/etc/freeradius
    networks:
      - pqc-enterprise-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "radtest", "test", "test", "localhost", "0", "testing123"]
      interval: 60s
      timeout: 10s
      retries: 3
    profiles: ["enterprise", "radius"]

  # Certificate Authority Manager
  pqc-ca-manager:
    build:
      context: .
      dockerfile: docker/Dockerfile.ca-manager
      args:
        - VERSION=1.0.0
    container_name: pqc-ca-manager
    environment:
      - CA_ROOT_PATH=/opt/pqc-ca
      - PQC_ALGORITHMS_ENABLED=true
      - HSM_ENABLED=${HSM_ENABLED:-false}
      - HSM_PKCS11_LIB=${HSM_PKCS11_LIB}
      - CA_VALIDITY_DAYS=${CA_VALIDITY_DAYS:-3650}
      - CERT_VALIDITY_DAYS=${CERT_VALIDITY_DAYS:-365}
      - AUTO_RENEWAL_ENABLED=true
      - AUTO_RENEWAL_THRESHOLD_DAYS=30
    volumes:
      - pqc-ca-data:/opt/pqc-ca
      - pqc-vpn-certs:/etc/ipsec.d
      - pqc-ca-config:/etc/pqc-ca
    networks:
      - pqc-enterprise-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "/opt/pqc-ca/bin/health-check.sh"]
      interval: 60s
      timeout: 15s
      retries: 3
    profiles: ["enterprise", "ca"]

  # Node Exporter for System Metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: pqc-node-exporter
    ports:
      - "127.0.0.1:9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      - '--collector.systemd'
      - '--collector.processes'
    networks:
      - pqc-enterprise-network
    restart: unless-stopped
    profiles: ["monitoring", "production"]

  # AlertManager for Prometheus Alerts
  alertmanager:
    image: prom/alertmanager:latest
    container_name: pqc-alertmanager
    ports:
      - "127.0.0.1:9093:9093"
    volumes:
      - ./monitoring/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - pqc-alertmanager-data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    networks:
      - pqc-enterprise-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles: ["monitoring", "production"]

  # Backup Service
  backup-service:
    build:
      context: .
      dockerfile: docker/Dockerfile.backup
    container_name: pqc-backup-service
    environment:
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-30}
      - S3_BUCKET=${S3_BACKUP_BUCKET}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - S3_REGION=${S3_REGION:-us-east-1}
      - ENCRYPTION_ENABLED=true
      - ENCRYPTION_KEY=${BACKUP_ENCRYPTION_KEY}
    volumes:
      - pqc-vpn-data:/data/pqc-vpn:ro
      - pqc-postgres-data:/data/postgres:ro
      - pqc-vpn-certs:/data/certs:ro
      - pqc-ca-data:/data/ca:ro
      - pqc-backups:/backups
    networks:
      - pqc-enterprise-network
    restart: unless-stopped
    profiles: ["enterprise", "backup"]

volumes:
  # Application Data
  pqc-vpn-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/pqc-vpn
  pqc-vpn-logs:
    driver: local
  pqc-vpn-certs:
    driver: local
  pqc-vpn-config:
    driver: local
  pqc-vpn-backups:
    driver: local

  # Database Volumes
  pqc-postgres-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/postgres
  pqc-postgres-backups:
    driver: local
  pqc-redis-data:
    driver: local
  pqc-redis-config:
    driver: local

  # Monitoring Volumes
  pqc-prometheus-data:
    driver: local
  pqc-grafana-data:
    driver: local
  pqc-grafana-config:
    driver: local
  pqc-alertmanager-data:
    driver: local

  # Logging Volumes
  pqc-elasticsearch-data:
    driver: local
  pqc-elasticsearch-config:
    driver: local
  pqc-logstash-data:
    driver: local
  pqc-kibana-data:
    driver: local

  # Infrastructure Volumes
  pqc-nginx-logs:
    driver: local
  pqc-radius-data:
    driver: local
  pqc-radius-config:
    driver: local
  pqc-ca-data:
    driver: local
  pqc-ca-config:
    driver: local
  pqc-backups:
    driver: local

networks:
  pqc-enterprise-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16
          gateway: 172.30.0.1
    driver_opts:
      com.docker.network.bridge.name: pqc-enterprise
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.bridge.host_binding_ipv4: "0.0.0.0"

# Deployment Profiles:
#
# Basic Enterprise VPN (Hub Only):
#   docker-compose up -d pqc-vpn-hub postgres redis
#
# Production with Monitoring:
#   docker-compose --profile production --profile monitoring up -d
#
# Enterprise with Full Stack:
#   docker-compose --profile enterprise --profile monitoring --profile logging up -d
#
# High Availability with Load Balancer:
#   docker-compose --profile production --profile loadbalancer --profile monitoring up -d
#
# Development Environment:
#   docker-compose up -d pqc-vpn-hub postgres redis prometheus grafana
#
# Enterprise with RADIUS Authentication:
#   docker-compose --profile enterprise --profile radius up -d
#
# Enterprise with Certificate Management:
#   docker-compose --profile enterprise --profile ca up -d
#
# Full Enterprise Deployment:
#   docker-compose --profile enterprise --profile monitoring --profile logging --profile radius --profile ca --profile backup up -d
