# PQC-VPN Enterprise Kubernetes Deployment v1.0.0
# Production-ready deployment for enterprise environments

apiVersion: v1
kind: Namespace
metadata:
  name: pqc-vpn
  labels:
    app.kubernetes.io/name: pqc-vpn
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: enterprise-vpn
    app.kubernetes.io/part-of: pqc-vpn-enterprise

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pqc-vpn-config
  namespace: pqc-vpn
  labels:
    app.kubernetes.io/name: pqc-vpn
    app.kubernetes.io/component: configuration
data:
  HUB_DOMAIN: "pqc-hub.enterprise.local"
  ORGANIZATION: "Enterprise"
  COUNTRY: "US"
  STATE: "California"
  LOCALITY: "San Francisco"
  PQC_KEM_ALGORITHM: "kyber1024"
  PQC_SIG_ALGORITHM: "dilithium5"
  ENTERPRISE_MODE: "true"
  HIGH_AVAILABILITY: "true"
  ENABLE_MONITORING: "true"
  ENABLE_API: "true"
  ENABLE_METRICS: "true"
  LOG_LEVEL: "INFO"
  BACKUP_ENABLED: "true"
  BACKUP_SCHEDULE: "0 2 * * *"
  BACKUP_RETENTION_DAYS: "30"
  CA_VALIDITY_DAYS: "3650"
  CERT_VALIDITY_DAYS: "365"
  AUTO_RENEWAL_ENABLED: "true"
  AUTO_RENEWAL_THRESHOLD_DAYS: "30"

---
apiVersion: v1
kind: Secret
metadata:
  name: pqc-vpn-secrets
  namespace: pqc-vpn
  labels:
    app.kubernetes.io/name: pqc-vpn
    app.kubernetes.io/component: secrets
type: Opaque
data:
  # Base64 encoded secrets - replace with actual values
  ADMIN_PASSWORD: Q2hhbmdlTWUxMjMh  # ChangeMe123!
  SECRET_KEY: ""  # Generate with: openssl rand -base64 32
  POSTGRES_PASSWORD: U2VjdXJlUGFzc3dvcmQxMjMh  # SecurePassword123!
  REDIS_PASSWORD: U2VjdXJlUmVkaXMxMjMh  # SecureRedis123!
  GRAFANA_PASSWORD: U2VjdXJlR3JhZmFuYTEyMyE=  # SecureGrafana123!
  GRAFANA_SECRET_KEY: ""  # Generate with: openssl rand -base64 32
  ELASTIC_PASSWORD: RWxhc3RpY1NlYXJjaDEyMyE=  # ElasticSearch123!
  KIBANA_PASSWORD: S2liYW5hMTIzIQ==  # Kibana123!
  KIBANA_ENCRYPTION_KEY: ""  # Generate with: openssl rand -base64 32
  RADIUS_SECRET: UmFkaXVzU2VjcmV0MTIzIQ==  # RadiusSecret123!
  BACKUP_ENCRYPTION_KEY: ""  # Generate with: openssl rand -base64 32

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pqc-vpn-data
  namespace: pqc-vpn
  labels:
    app.kubernetes.io/name: pqc-vpn
    app.kubernetes.io/component: storage
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: fast-ssd
  resources:
    requests:
      storage: 100Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pqc-postgres-data
  namespace: pqc-vpn
  labels:
    app.kubernetes.io/name: pqc-vpn
    app.kubernetes.io/component: database
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: fast-ssd
  resources:
    requests:
      storage: 200Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pqc-prometheus-data
  namespace: pqc-vpn
  labels:
    app.kubernetes.io/name: pqc-vpn
    app.kubernetes.io/component: monitoring
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: fast-ssd
  resources:
    requests:
      storage: 500Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pqc-elasticsearch-data
  namespace: pqc-vpn
  labels:
    app.kubernetes.io/name: pqc-vpn
    app.kubernetes.io/component: logging
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: fast-ssd
  resources:
    requests:
      storage: 1Ti

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgresql
  namespace: pqc-vpn
  labels:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: pqc-vpn-enterprise
spec:
  serviceName: postgresql
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
  template:
    metadata:
      labels:
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/component: database
    spec:
      securityContext:
        fsGroup: 999
      containers:
      - name: postgresql
        image: postgres:15-alpine
        imagePullPolicy: IfNotPresent
        env:
        - name: POSTGRES_DB
          value: "pqc_vpn_enterprise"
        - name: POSTGRES_USER
          value: "pqc_admin"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: pqc-vpn-secrets
              key: POSTGRES_PASSWORD
        - name: POSTGRES_INITDB_ARGS
          value: "--auth-host=scram-sha-256"
        - name: PGDATA
          value: "/var/lib/postgresql/data/pgdata"
        ports:
        - containerPort: 5432
          name: postgresql
        volumeMounts:
        - name: postgresql-data
          mountPath: /var/lib/postgresql/data
        - name: postgresql-config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U pqc_admin -d pqc_vpn_enterprise -h 127.0.0.1 -p 5432
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U pqc_admin -d pqc_vpn_enterprise -h 127.0.0.1 -p 5432
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        resources:
          limits:
            cpu: 2000m
            memory: 4Gi
          requests:
            cpu: 500m
            memory: 2Gi
      volumes:
      - name: postgresql-config
        configMap:
          name: postgresql-config
  volumeClaimTemplates:
  - metadata:
      name: postgresql-data
    spec:
      accessModes:
      - ReadWriteOnce
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 200Gi

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgresql-config
  namespace: pqc-vpn
data:
  postgresql.conf: |
    # PostgreSQL Configuration for PQC-VPN Enterprise
    max_connections = 200
    shared_buffers = 1GB
    effective_cache_size = 3GB
    maintenance_work_mem = 256MB
    checkpoint_completion_target = 0.9
    wal_buffers = 16MB
    default_statistics_target = 100
    random_page_cost = 1.1
    effective_io_concurrency = 200
    work_mem = 16MB
    min_wal_size = 1GB
    max_wal_size = 4GB
    max_worker_processes = 8
    max_parallel_workers_per_gather = 4
    max_parallel_workers = 8
    max_parallel_maintenance_workers = 4
    
    # Logging
    log_destination = 'stderr'
    logging_collector = on
    log_directory = 'log'
    log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
    log_truncate_on_rotation = off
    log_rotation_age = 1d
    log_rotation_size = 100MB
    log_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
    log_checkpoints = on
    log_connections = on
    log_disconnections = on
    log_lock_waits = on
    log_temp_files = 0
    log_autovacuum_min_duration = 0
    log_error_verbosity = default

---
apiVersion: v1
kind: Service
metadata:
  name: postgresql
  namespace: pqc-vpn
  labels:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: database
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
    name: postgresql
  selector:
    app.kubernetes.io/name: postgresql

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: pqc-vpn
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: cache
    app.kubernetes.io/part-of: pqc-vpn-enterprise
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        app.kubernetes.io/component: cache
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        imagePullPolicy: IfNotPresent
        command:
        - redis-server
        - /etc/redis/redis.conf
        ports:
        - containerPort: 6379
          name: redis
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: pqc-vpn-secrets
              key: REDIS_PASSWORD
        volumeMounts:
        - name: redis-config
          mountPath: /etc/redis
        - name: redis-data
          mountPath: /data
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 3
        resources:
          limits:
            cpu: 1000m
            memory: 1Gi
          requests:
            cpu: 100m
            memory: 512Mi
      volumes:
      - name: redis-config
        configMap:
          name: redis-config
      - name: redis-data
        emptyDir: {}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
  namespace: pqc-vpn
data:
  redis.conf: |
    # Redis Configuration for PQC-VPN Enterprise
    bind 0.0.0.0
    protected-mode yes
    port 6379
    tcp-backlog 511
    timeout 0
    tcp-keepalive 300
    daemonize no
    supervised no
    pidfile /var/run/redis_6379.pid
    loglevel notice
    logfile ""
    databases 16
    always-show-logo no
    save 900 1
    save 300 10
    save 60 10000
    stop-writes-on-bgsave-error yes
    rdbcompression yes
    rdbchecksum yes
    dbfilename dump.rdb
    rdb-del-sync-files no
    dir ./
    replica-serve-stale-data yes
    replica-read-only yes
    repl-diskless-sync no
    repl-diskless-sync-delay 5
    repl-diskless-load disabled
    repl-disable-tcp-nodelay no
    replica-priority 100
    acllog-max-len 128
    requirepass ${REDIS_PASSWORD}
    lazyfree-lazy-eviction no
    lazyfree-lazy-expire no
    lazyfree-lazy-server-del no
    replica-lazy-flush no
    lazyfree-lazy-user-del no
    lazyfree-lazy-user-flush no
    oom-score-adj no
    oom-score-adj-values 0 200 800
    disable-thp yes
    appendonly yes
    appendfilename "appendonly.aof"
    appendfsync everysec
    no-appendfsync-on-rewrite no
    auto-aof-rewrite-percentage 100
    auto-aof-rewrite-min-size 64mb
    aof-load-truncated yes
    aof-use-rdb-preamble yes
    lua-time-limit 5000
    slowlog-log-slower-than 10000
    slowlog-max-len 128
    latency-monitor-threshold 0
    notify-keyspace-events ""
    hash-max-ziplist-entries 512
    hash-max-ziplist-value 64
    list-max-ziplist-size -2
    list-compress-depth 0
    set-max-intset-entries 512
    zset-max-ziplist-entries 128
    zset-max-ziplist-value 64
    hll-sparse-max-bytes 3000
    stream-node-max-bytes 4096
    stream-node-max-entries 100
    activerehashing yes
    client-output-buffer-limit normal 0 0 0
    client-output-buffer-limit replica 256mb 64mb 60
    client-output-buffer-limit pubsub 32mb 8mb 60
    hz 10
    dynamic-hz yes
    aof-rewrite-incremental-fsync yes
    rdb-save-incremental-fsync yes
    jemalloc-bg-thread yes

---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: pqc-vpn
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: cache
spec:
  type: ClusterIP
  ports:
  - port: 6379
    targetPort: 6379
    protocol: TCP
    name: redis
  selector:
    app.kubernetes.io/name: redis

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pqc-vpn-hub
  namespace: pqc-vpn
  labels:
    app.kubernetes.io/name: pqc-vpn
    app.kubernetes.io/component: hub
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/part-of: pqc-vpn-enterprise
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: pqc-vpn
      app.kubernetes.io/component: hub
  template:
    metadata:
      labels:
        app.kubernetes.io/name: pqc-vpn
        app.kubernetes.io/component: hub
        app.kubernetes.io/version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9100"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: pqc-vpn-hub
      securityContext:
        runAsNonRoot: false
        runAsUser: 0
        fsGroup: 0
      initContainers:
      - name: init-certificates
        image: qentangle/pqc-vpn-hub:1.0.0
        command:
        - /bin/bash
        - -c
        - |
          echo "Initializing PQC certificates..."
          /opt/pqc-vpn/scripts/init-certificates.sh
        env:
        - name: HUB_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        envFrom:
        - configMapRef:
            name: pqc-vpn-config
        - secretRef:
            name: pqc-vpn-secrets
        volumeMounts:
        - name: pqc-vpn-data
          mountPath: /opt/pqc-vpn/data
        - name: pqc-vpn-certs
          mountPath: /etc/ipsec.d
      containers:
      - name: pqc-vpn-hub
        image: qentangle/pqc-vpn-hub:1.0.0
        imagePullPolicy: IfNotPresent
        securityContext:
          privileged: true
          capabilities:
            add:
            - NET_ADMIN
            - SYS_MODULE
            - NET_RAW
        env:
        - name: HUB_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        envFrom:
        - configMapRef:
            name: pqc-vpn-config
        - secretRef:
            name: pqc-vpn-secrets
        ports:
        - containerPort: 500
          protocol: UDP
          name: ike
        - containerPort: 4500
          protocol: UDP
          name: nat-t
        - containerPort: 8443
          protocol: TCP
          name: web
        - containerPort: 9090
          protocol: TCP
          name: api
        - containerPort: 9100
          protocol: TCP
          name: metrics
        volumeMounts:
        - name: pqc-vpn-data
          mountPath: /opt/pqc-vpn/data
        - name: pqc-vpn-logs
          mountPath: /var/log/pqc-vpn
        - name: pqc-vpn-certs
          mountPath: /etc/ipsec.d
        - name: pqc-vpn-config-volume
          mountPath: /etc/pqc-vpn
        - name: strongswan-config
          mountPath: /etc/strongswan
        livenessProbe:
          exec:
            command:
            - /usr/local/bin/pqc-vpn-manager
            - status
            - --quick
          initialDelaySeconds: 120
          periodSeconds: 30
          timeoutSeconds: 15
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/health
            port: 9090
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        resources:
          limits:
            cpu: 4000m
            memory: 8Gi
            ephemeral-storage: 10Gi
          requests:
            cpu: 1000m
            memory: 4Gi
            ephemeral-storage: 5Gi
      volumes:
      - name: pqc-vpn-data
        persistentVolumeClaim:
          claimName: pqc-vpn-data
      - name: pqc-vpn-logs
        emptyDir: {}
      - name: pqc-vpn-certs
        emptyDir: {}
      - name: pqc-vpn-config-volume
        configMap:
          name: pqc-vpn-config
      - name: strongswan-config
        configMap:
          name: strongswan-config
      nodeSelector:
        kubernetes.io/arch: amd64
      tolerations:
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 30
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 30

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: pqc-vpn-hub
  namespace: pqc-vpn
  labels:
    app.kubernetes.io/name: pqc-vpn
    app.kubernetes.io/component: hub

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: pqc-vpn
  name: pqc-vpn-hub
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints", "configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: pqc-vpn-hub
  namespace: pqc-vpn
subjects:
- kind: ServiceAccount
  name: pqc-vpn-hub
  namespace: pqc-vpn
roleRef:
  kind: Role
  name: pqc-vpn-hub
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: v1
kind: Service
metadata:
  name: pqc-vpn-hub
  namespace: pqc-vpn
  labels:
    app.kubernetes.io/name: pqc-vpn
    app.kubernetes.io/component: hub
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "udp"
spec:
  type: LoadBalancer
  externalTrafficPolicy: Local
  ports:
  - port: 500
    targetPort: 500
    protocol: UDP
    name: ike
  - port: 4500
    targetPort: 4500
    protocol: UDP
    name: nat-t
  - port: 8443
    targetPort: 8443
    protocol: TCP
    name: web
  selector:
    app.kubernetes.io/name: pqc-vpn
    app.kubernetes.io/component: hub

---
apiVersion: v1
kind: Service
metadata:
  name: pqc-vpn-hub-internal
  namespace: pqc-vpn
  labels:
    app.kubernetes.io/name: pqc-vpn
    app.kubernetes.io/component: hub-internal
spec:
  type: ClusterIP
  ports:
  - port: 9090
    targetPort: 9090
    protocol: TCP
    name: api
  - port: 9100
    targetPort: 9100
    protocol: TCP
    name: metrics
  selector:
    app.kubernetes.io/name: pqc-vpn
    app.kubernetes.io/component: hub

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: pqc-vpn-network-policy
  namespace: pqc-vpn
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: pqc-vpn
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 9100
  - from: []
    ports:
    - protocol: UDP
      port: 500
    - protocol: UDP
      port: 4500
    - protocol: TCP
      port: 8443
  egress:
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: postgresql
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: redis
    ports:
    - protocol: TCP
      port: 6379
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: pqc-vpn-hub-hpa
  namespace: pqc-vpn
  labels:
    app.kubernetes.io/name: pqc-vpn
    app.kubernetes.io/component: autoscaler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: pqc-vpn-hub
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: pqc-vpn-hub-pdb
  namespace: pqc-vpn
  labels:
    app.kubernetes.io/name: pqc-vpn
    app.kubernetes.io/component: hub
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: pqc-vpn
      app.kubernetes.io/component: hub

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: strongswan-config
  namespace: pqc-vpn
  labels:
    app.kubernetes.io/name: pqc-vpn
    app.kubernetes.io/component: configuration
data:
  strongswan.conf: |
    # strongSwan Configuration for PQC-VPN Enterprise v1.0.0
    charon {
        load_modular = yes
        
        # Performance optimizations for Kubernetes
        threads = 32
        worker_threads = 16
        
        processor {
            priority_threads {
                high = 8
                medium = 4
                low = 2
            }
        }
        
        # Network settings
        port = 500
        port_nat_t = 4500
        
        # Security settings
        send_vendor_id = no
        send_delay = 0
        retransmit_timeout = 4.0
        retransmit_tries = 5
        retransmit_base = 1.8
        
        # Logging
        filelog {
            /var/log/pqc-vpn/charon.log {
                time_format = %b %e %T
                ike_name = yes
                append = no
                default = 1
                flush_line = yes
            }
            stderr {
                ike = 2
                knl = 2
                cfg = 2
            }
        }
        
        # Plugin configuration
        plugins {
            include strongswan.d/charon/*.conf
            
            openssl {
                load = yes
                fips_mode = no
                engine_id = oqsprovider
            }
            
            kernel-netlink {
                load = yes
                fwmark = !0x42
            }
            
            socket-default {
                load = yes
            }
            
            stroke {
                load = yes
            }
            
            updown {
                load = yes
            }
        }
    }
    
    include strongswan.d/*.conf

---
# Monitoring Resources (Prometheus, Grafana, etc.)
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: pqc-vpn
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
    
    rule_files:
      - "pqc_vpn_rules.yml"
    
    scrape_configs:
      - job_name: 'pqc-vpn-hub'
        kubernetes_sd_configs:
        - role: pod
          namespaces:
            names:
            - pqc-vpn
        relabel_configs:
        - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_name]
          action: keep
          regex: pqc-vpn
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
          action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          target_label: __address__
        - action: labelmap
          regex: __meta_kubernetes_pod_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_pod_name]
          action: replace
          target_label: kubernetes_pod_name
    
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
        - role: pod
        relabel_configs:
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
          action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          target_label: __address__
        - action: labelmap
          regex: __meta_kubernetes_pod_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_pod_name]
          action: replace
          target_label: kubernetes_pod_name

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: pqc-vpn
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: prometheus
  template:
    metadata:
      labels:
        app.kubernetes.io/name: prometheus
        app.kubernetes.io/component: monitoring
    spec:
      serviceAccountName: prometheus
      containers:
      - name: prometheus
        image: prom/prometheus:latest
        args:
        - '--config.file=/etc/prometheus/prometheus.yml'
        - '--storage.tsdb.path=/prometheus'
        - '--web.console.libraries=/etc/prometheus/console_libraries'
        - '--web.console.templates=/etc/prometheus/consoles'
        - '--storage.tsdb.retention.time=90d'
        - '--storage.tsdb.retention.size=50GB'
        - '--web.enable-lifecycle'
        - '--web.enable-admin-api'
        - '--web.enable-remote-write-receiver'
        - '--enable-feature=exemplar-storage'
        ports:
        - containerPort: 9090
          name: web
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus
        - name: prometheus-data
          mountPath: /prometheus
        resources:
          limits:
            cpu: 2000m
            memory: 4Gi
          requests:
            cpu: 500m
            memory: 2Gi
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
      - name: prometheus-data
        persistentVolumeClaim:
          claimName: pqc-prometheus-data

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: pqc-vpn

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
rules:
- apiGroups: [""]
  resources: ["nodes", "nodes/metrics", "services", "endpoints", "pods"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: pqc-vpn

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: pqc-vpn
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: monitoring
spec:
  type: ClusterIP
  ports:
  - port: 9090
    targetPort: 9090
    protocol: TCP
    name: web
  selector:
    app.kubernetes.io/name: prometheus
